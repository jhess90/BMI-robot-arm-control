/* Auto-generated by genmsg_cpp for file /home/robot/fuerte_workspace/sandbox/barrett-ros-pkg/wam_common/wam_msgs/msg/RTJointVel.msg */
#ifndef WAM_MSGS_MESSAGE_RTJOINTVEL_H
#define WAM_MSGS_MESSAGE_RTJOINTVEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wam_msgs
{
template <class ContainerAllocator>
struct RTJointVel_ {
  typedef RTJointVel_<ContainerAllocator> Type;

  RTJointVel_()
  : velocities()
  {
  }

  RTJointVel_(const ContainerAllocator& _alloc)
  : velocities(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _velocities_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  velocities;


  typedef boost::shared_ptr< ::wam_msgs::RTJointVel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_msgs::RTJointVel_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RTJointVel
typedef  ::wam_msgs::RTJointVel_<std::allocator<void> > RTJointVel;

typedef boost::shared_ptr< ::wam_msgs::RTJointVel> RTJointVelPtr;
typedef boost::shared_ptr< ::wam_msgs::RTJointVel const> RTJointVelConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wam_msgs::RTJointVel_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wam_msgs::RTJointVel_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wam_msgs::RTJointVel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wam_msgs::RTJointVel_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wam_msgs::RTJointVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9b1dee67c9ae4d5adf87be09d4bf02ef";
  }

  static const char* value(const  ::wam_msgs::RTJointVel_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9b1dee67c9ae4d5aULL;
  static const uint64_t static_value2 = 0xdf87be09d4bf02efULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_msgs::RTJointVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_msgs/RTJointVel";
  }

  static const char* value(const  ::wam_msgs::RTJointVel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wam_msgs::RTJointVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] velocities\n\
\n\
";
  }

  static const char* value(const  ::wam_msgs::RTJointVel_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wam_msgs::RTJointVel_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.velocities);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RTJointVel_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_msgs::RTJointVel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wam_msgs::RTJointVel_<ContainerAllocator> & v) 
  {
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocities[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // WAM_MSGS_MESSAGE_RTJOINTVEL_H

