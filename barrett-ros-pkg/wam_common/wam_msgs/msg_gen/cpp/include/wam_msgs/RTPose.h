/* Auto-generated by genmsg_cpp for file /home/robot/fuerte_workspace/sandbox/barrett-ros-pkg/wam_common/wam_msgs/msg/RTPose.msg */
#ifndef WAM_MSGS_MESSAGE_RTPOSE_H
#define WAM_MSGS_MESSAGE_RTPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wam_msgs
{
template <class ContainerAllocator>
struct RTPose_ {
  typedef RTPose_<ContainerAllocator> Type;

  RTPose_()
  : position()
  , orientation()
  , pos_rate_limits()
  , ortn_rate_limits()
  {
    position.assign(0.0);
    orientation.assign(0.0);
    pos_rate_limits.assign(0.0);
    ortn_rate_limits.assign(0.0);
  }

  RTPose_(const ContainerAllocator& _alloc)
  : position()
  , orientation()
  , pos_rate_limits()
  , ortn_rate_limits()
  {
    position.assign(0.0);
    orientation.assign(0.0);
    pos_rate_limits.assign(0.0);
    ortn_rate_limits.assign(0.0);
  }

  typedef boost::array<float, 3>  _position_type;
  boost::array<float, 3>  position;

  typedef boost::array<float, 4>  _orientation_type;
  boost::array<float, 4>  orientation;

  typedef boost::array<float, 3>  _pos_rate_limits_type;
  boost::array<float, 3>  pos_rate_limits;

  typedef boost::array<float, 4>  _ortn_rate_limits_type;
  boost::array<float, 4>  ortn_rate_limits;


  typedef boost::shared_ptr< ::wam_msgs::RTPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_msgs::RTPose_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RTPose
typedef  ::wam_msgs::RTPose_<std::allocator<void> > RTPose;

typedef boost::shared_ptr< ::wam_msgs::RTPose> RTPosePtr;
typedef boost::shared_ptr< ::wam_msgs::RTPose const> RTPoseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wam_msgs::RTPose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wam_msgs::RTPose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wam_msgs::RTPose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wam_msgs::RTPose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wam_msgs::RTPose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "34cb882fafa374fde18bf3b5e23cd4cd";
  }

  static const char* value(const  ::wam_msgs::RTPose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x34cb882fafa374fdULL;
  static const uint64_t static_value2 = 0xe18bf3b5e23cd4cdULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_msgs::RTPose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_msgs/RTPose";
  }

  static const char* value(const  ::wam_msgs::RTPose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wam_msgs::RTPose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[3] position\n\
float32[4] orientation\n\
float32[3] pos_rate_limits\n\
float32[4] ortn_rate_limits\n\
\n\
";
  }

  static const char* value(const  ::wam_msgs::RTPose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wam_msgs::RTPose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wam_msgs::RTPose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.orientation);
    stream.next(m.pos_rate_limits);
    stream.next(m.ortn_rate_limits);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RTPose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_msgs::RTPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wam_msgs::RTPose_<ContainerAllocator> & v) 
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "pos_rate_limits[]" << std::endl;
    for (size_t i = 0; i < v.pos_rate_limits.size(); ++i)
    {
      s << indent << "  pos_rate_limits[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos_rate_limits[i]);
    }
    s << indent << "ortn_rate_limits[]" << std::endl;
    for (size_t i = 0; i < v.ortn_rate_limits.size(); ++i)
    {
      s << indent << "  ortn_rate_limits[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ortn_rate_limits[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // WAM_MSGS_MESSAGE_RTPOSE_H

