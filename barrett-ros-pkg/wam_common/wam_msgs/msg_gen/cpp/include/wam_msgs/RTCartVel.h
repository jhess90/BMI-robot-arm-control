/* Auto-generated by genmsg_cpp for file /home/robot/fuerte_workspace/sandbox/barrett-ros-pkg/wam_common/wam_msgs/msg/RTCartVel.msg */
#ifndef WAM_MSGS_MESSAGE_RTCARTVEL_H
#define WAM_MSGS_MESSAGE_RTCARTVEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wam_msgs
{
template <class ContainerAllocator>
struct RTCartVel_ {
  typedef RTCartVel_<ContainerAllocator> Type;

  RTCartVel_()
  : direction()
  , magnitude(0.0)
  {
    direction.assign(0.0);
  }

  RTCartVel_(const ContainerAllocator& _alloc)
  : direction()
  , magnitude(0.0)
  {
    direction.assign(0.0);
  }

  typedef boost::array<float, 3>  _direction_type;
  boost::array<float, 3>  direction;

  typedef float _magnitude_type;
  float magnitude;


  typedef boost::shared_ptr< ::wam_msgs::RTCartVel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_msgs::RTCartVel_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RTCartVel
typedef  ::wam_msgs::RTCartVel_<std::allocator<void> > RTCartVel;

typedef boost::shared_ptr< ::wam_msgs::RTCartVel> RTCartVelPtr;
typedef boost::shared_ptr< ::wam_msgs::RTCartVel const> RTCartVelConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wam_msgs::RTCartVel_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wam_msgs::RTCartVel_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wam_msgs::RTCartVel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wam_msgs::RTCartVel_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wam_msgs::RTCartVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bde6e49ce1902bc915138d25af0e9ef1";
  }

  static const char* value(const  ::wam_msgs::RTCartVel_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbde6e49ce1902bc9ULL;
  static const uint64_t static_value2 = 0x15138d25af0e9ef1ULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_msgs::RTCartVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_msgs/RTCartVel";
  }

  static const char* value(const  ::wam_msgs::RTCartVel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wam_msgs::RTCartVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[3] direction\n\
float32    magnitude\n\
\n\
";
  }

  static const char* value(const  ::wam_msgs::RTCartVel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wam_msgs::RTCartVel_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wam_msgs::RTCartVel_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.direction);
    stream.next(m.magnitude);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RTCartVel_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_msgs::RTCartVel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wam_msgs::RTCartVel_<ContainerAllocator> & v) 
  {
    s << indent << "direction[]" << std::endl;
    for (size_t i = 0; i < v.direction.size(); ++i)
    {
      s << indent << "  direction[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.direction[i]);
    }
    s << indent << "magnitude: ";
    Printer<float>::stream(s, indent + "  ", v.magnitude);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WAM_MSGS_MESSAGE_RTCARTVEL_H

