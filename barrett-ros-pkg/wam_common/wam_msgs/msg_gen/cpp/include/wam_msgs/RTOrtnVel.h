/* Auto-generated by genmsg_cpp for file /home/robot/fuerte_workspace/sandbox/barrett-ros-pkg/wam_common/wam_msgs/msg/RTOrtnVel.msg */
#ifndef WAM_MSGS_MESSAGE_RTORTNVEL_H
#define WAM_MSGS_MESSAGE_RTORTNVEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wam_msgs
{
template <class ContainerAllocator>
struct RTOrtnVel_ {
  typedef RTOrtnVel_<ContainerAllocator> Type;

  RTOrtnVel_()
  : angular()
  , magnitude(0.0)
  {
    angular.assign(0.0);
  }

  RTOrtnVel_(const ContainerAllocator& _alloc)
  : angular()
  , magnitude(0.0)
  {
    angular.assign(0.0);
  }

  typedef boost::array<float, 3>  _angular_type;
  boost::array<float, 3>  angular;

  typedef float _magnitude_type;
  float magnitude;


  typedef boost::shared_ptr< ::wam_msgs::RTOrtnVel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_msgs::RTOrtnVel_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RTOrtnVel
typedef  ::wam_msgs::RTOrtnVel_<std::allocator<void> > RTOrtnVel;

typedef boost::shared_ptr< ::wam_msgs::RTOrtnVel> RTOrtnVelPtr;
typedef boost::shared_ptr< ::wam_msgs::RTOrtnVel const> RTOrtnVelConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wam_msgs::RTOrtnVel_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wam_msgs::RTOrtnVel_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wam_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wam_msgs::RTOrtnVel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wam_msgs::RTOrtnVel_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wam_msgs::RTOrtnVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2326f85574083a0a1fc4fddeff59781c";
  }

  static const char* value(const  ::wam_msgs::RTOrtnVel_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2326f85574083a0aULL;
  static const uint64_t static_value2 = 0x1fc4fddeff59781cULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_msgs::RTOrtnVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_msgs/RTOrtnVel";
  }

  static const char* value(const  ::wam_msgs::RTOrtnVel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wam_msgs::RTOrtnVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[3] angular\n\
float32	   magnitude\n\
\n\
";
  }

  static const char* value(const  ::wam_msgs::RTOrtnVel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wam_msgs::RTOrtnVel_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wam_msgs::RTOrtnVel_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.angular);
    stream.next(m.magnitude);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RTOrtnVel_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_msgs::RTOrtnVel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wam_msgs::RTOrtnVel_<ContainerAllocator> & v) 
  {
    s << indent << "angular[]" << std::endl;
    for (size_t i = 0; i < v.angular.size(); ++i)
    {
      s << indent << "  angular[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angular[i]);
    }
    s << indent << "magnitude: ";
    Printer<float>::stream(s, indent + "  ", v.magnitude);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WAM_MSGS_MESSAGE_RTORTNVEL_H

