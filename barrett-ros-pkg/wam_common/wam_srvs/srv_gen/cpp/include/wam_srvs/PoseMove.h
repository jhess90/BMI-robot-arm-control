/* Auto-generated by genmsg_cpp for file /home/robot/fuerte_workspace/sandbox/barrett-ros-pkg/wam_common/wam_srvs/srv/PoseMove.srv */
#ifndef WAM_SRVS_SERVICE_POSEMOVE_H
#define WAM_SRVS_SERVICE_POSEMOVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"



namespace wam_srvs
{
template <class ContainerAllocator>
struct PoseMoveRequest_ {
  typedef PoseMoveRequest_<ContainerAllocator> Type;

  PoseMoveRequest_()
  : pose()
  {
  }

  PoseMoveRequest_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::wam_srvs::PoseMoveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_srvs::PoseMoveRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PoseMoveRequest
typedef  ::wam_srvs::PoseMoveRequest_<std::allocator<void> > PoseMoveRequest;

typedef boost::shared_ptr< ::wam_srvs::PoseMoveRequest> PoseMoveRequestPtr;
typedef boost::shared_ptr< ::wam_srvs::PoseMoveRequest const> PoseMoveRequestConstPtr;


template <class ContainerAllocator>
struct PoseMoveResponse_ {
  typedef PoseMoveResponse_<ContainerAllocator> Type;

  PoseMoveResponse_()
  {
  }

  PoseMoveResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::wam_srvs::PoseMoveResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_srvs::PoseMoveResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PoseMoveResponse
typedef  ::wam_srvs::PoseMoveResponse_<std::allocator<void> > PoseMoveResponse;

typedef boost::shared_ptr< ::wam_srvs::PoseMoveResponse> PoseMoveResponsePtr;
typedef boost::shared_ptr< ::wam_srvs::PoseMoveResponse const> PoseMoveResponseConstPtr;

struct PoseMove
{

typedef PoseMoveRequest Request;
typedef PoseMoveResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PoseMove
} // namespace wam_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wam_srvs::PoseMoveRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wam_srvs::PoseMoveRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wam_srvs::PoseMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f192399f711a48924df9a394d37edd67";
  }

  static const char* value(const  ::wam_srvs::PoseMoveRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf192399f711a4892ULL;
  static const uint64_t static_value2 = 0x4df9a394d37edd67ULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_srvs::PoseMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_srvs/PoseMoveRequest";
  }

  static const char* value(const  ::wam_srvs::PoseMoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wam_srvs::PoseMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::wam_srvs::PoseMoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wam_srvs::PoseMoveRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wam_srvs::PoseMoveResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wam_srvs::PoseMoveResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wam_srvs::PoseMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::wam_srvs::PoseMoveResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_srvs::PoseMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_srvs/PoseMoveResponse";
  }

  static const char* value(const  ::wam_srvs::PoseMoveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wam_srvs::PoseMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::wam_srvs::PoseMoveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wam_srvs::PoseMoveResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wam_srvs::PoseMoveRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PoseMoveRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wam_srvs::PoseMoveResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PoseMoveResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<wam_srvs::PoseMove> {
  static const char* value() 
  {
    return "f192399f711a48924df9a394d37edd67";
  }

  static const char* value(const wam_srvs::PoseMove&) { return value(); } 
};

template<>
struct DataType<wam_srvs::PoseMove> {
  static const char* value() 
  {
    return "wam_srvs/PoseMove";
  }

  static const char* value(const wam_srvs::PoseMove&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wam_srvs::PoseMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f192399f711a48924df9a394d37edd67";
  }

  static const char* value(const wam_srvs::PoseMoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wam_srvs::PoseMoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_srvs/PoseMove";
  }

  static const char* value(const wam_srvs::PoseMoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wam_srvs::PoseMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f192399f711a48924df9a394d37edd67";
  }

  static const char* value(const wam_srvs::PoseMoveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wam_srvs::PoseMoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_srvs/PoseMove";
  }

  static const char* value(const wam_srvs::PoseMoveResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // WAM_SRVS_SERVICE_POSEMOVE_H

