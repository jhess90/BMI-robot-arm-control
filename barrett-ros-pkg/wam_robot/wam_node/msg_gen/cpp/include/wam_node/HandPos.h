/* Auto-generated by genmsg_cpp for file /home/robot/fuerte_workspace/sandbox/barrett-ros-pkg/wam_robot/wam_node/msg/HandPos.msg */
#ifndef WAM_NODE_MESSAGE_HANDPOS_H
#define WAM_NODE_MESSAGE_HANDPOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wam_node
{
template <class ContainerAllocator>
struct HandPos_ {
  typedef HandPos_<ContainerAllocator> Type;

  HandPos_()
  : f1(0)
  , f2(0)
  , f3(0)
  , spread(0)
  {
  }

  HandPos_(const ContainerAllocator& _alloc)
  : f1(0)
  , f2(0)
  , f3(0)
  , spread(0)
  {
  }

  typedef int32_t _f1_type;
  int32_t f1;

  typedef int32_t _f2_type;
  int32_t f2;

  typedef int32_t _f3_type;
  int32_t f3;

  typedef int32_t _spread_type;
  int32_t spread;


  typedef boost::shared_ptr< ::wam_node::HandPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_node::HandPos_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HandPos
typedef  ::wam_node::HandPos_<std::allocator<void> > HandPos;

typedef boost::shared_ptr< ::wam_node::HandPos> HandPosPtr;
typedef boost::shared_ptr< ::wam_node::HandPos const> HandPosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wam_node::HandPos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wam_node::HandPos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wam_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wam_node::HandPos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wam_node::HandPos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wam_node::HandPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "82d22a9cd69bfae0453346c187d5c4d2";
  }

  static const char* value(const  ::wam_node::HandPos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x82d22a9cd69bfae0ULL;
  static const uint64_t static_value2 = 0x453346c187d5c4d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_node::HandPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_node/HandPos";
  }

  static const char* value(const  ::wam_node::HandPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wam_node::HandPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 f1\n\
int32 f2\n\
int32 f3\n\
int32 spread\n\
\n\
";
  }

  static const char* value(const  ::wam_node::HandPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wam_node::HandPos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wam_node::HandPos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.f1);
    stream.next(m.f2);
    stream.next(m.f3);
    stream.next(m.spread);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HandPos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_node::HandPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wam_node::HandPos_<ContainerAllocator> & v) 
  {
    s << indent << "f1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.f1);
    s << indent << "f2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.f2);
    s << indent << "f3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.f3);
    s << indent << "spread: ";
    Printer<int32_t>::stream(s, indent + "  ", v.spread);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WAM_NODE_MESSAGE_HANDPOS_H

