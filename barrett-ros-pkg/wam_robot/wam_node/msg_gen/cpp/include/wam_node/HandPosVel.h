/* Auto-generated by genmsg_cpp for file /home/robot/fuerte_workspace/sandbox/barrett-ros-pkg/wam_robot/wam_node/msg/HandPosVel.msg */
#ifndef WAM_NODE_MESSAGE_HANDPOSVEL_H
#define WAM_NODE_MESSAGE_HANDPOSVEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wam_node
{
template <class ContainerAllocator>
struct HandPosVel_ {
  typedef HandPosVel_<ContainerAllocator> Type;

  HandPosVel_()
  : joints()
  , hz(0)
  {
  }

  HandPosVel_(const ContainerAllocator& _alloc)
  : joints(_alloc)
  , hz(0)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _joints_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  joints;

  typedef int32_t _hz_type;
  int32_t hz;


  typedef boost::shared_ptr< ::wam_node::HandPosVel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_node::HandPosVel_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HandPosVel
typedef  ::wam_node::HandPosVel_<std::allocator<void> > HandPosVel;

typedef boost::shared_ptr< ::wam_node::HandPosVel> HandPosVelPtr;
typedef boost::shared_ptr< ::wam_node::HandPosVel const> HandPosVelConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wam_node::HandPosVel_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wam_node::HandPosVel_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wam_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wam_node::HandPosVel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wam_node::HandPosVel_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wam_node::HandPosVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0fe558db5e4336657e2b4d45f7b84e97";
  }

  static const char* value(const  ::wam_node::HandPosVel_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0fe558db5e433665ULL;
  static const uint64_t static_value2 = 0x7e2b4d45f7b84e97ULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_node::HandPosVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wam_node/HandPosVel";
  }

  static const char* value(const  ::wam_node::HandPosVel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wam_node::HandPosVel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] joints\n\
int32 hz\n\
\n\
";
  }

  static const char* value(const  ::wam_node::HandPosVel_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wam_node::HandPosVel_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joints);
    stream.next(m.hz);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HandPosVel_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_node::HandPosVel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wam_node::HandPosVel_<ContainerAllocator> & v) 
  {
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joints[i]);
    }
    s << indent << "hz: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hz);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WAM_NODE_MESSAGE_HANDPOSVEL_H

